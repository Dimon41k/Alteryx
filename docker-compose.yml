version: '3.1'

services:
  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    restart: always

    volumes:
      - ./producer:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network

    links:
      - db
      - rabbitmq
    depends_on:
      - rabbitmq
      - db
    networks:
      - app-network
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      AMQP_HOST: ${AMQP_HOST}
      POLLING_INTERVAL: ${POLLING_INTERVAL}
      TASKS_QUEUE: ${TASKS_QUEUE}
    command: ["./wait-for-it.sh", "rabbitmq:15672", "--", "nodemon"]


  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    restart: always
    volumes:
      - ./consumer:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network
    links:
      - rabbitmq
    depends_on:
      - rabbitmq
      - db
      - producer
    environment:
      AMQP_HOST: ${AMQP_HOST}
      TASKS_QUEUE: ${TASKS_QUEUE}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    command: ["./wait-for-it.sh", "rabbitmq:15672", "--", "nodemon"]

  rabbitmq:
    build:
        context: ./rabbitmq
        dockerfile: Dockerfile
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - 'rabbitmq_data:/data'
    networks:
      - app-network

  db:
    image: postgres:11.2
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ../db:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - app-network

  adminer:
    image: adminer
    restart: always
    networks:
      - app-network
    ports:
        - 8080:8080

volumes:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge